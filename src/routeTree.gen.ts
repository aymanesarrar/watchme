/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const WatchMovieMovieIdLazyImport = createFileRoute('/watch/movie/$movieId')()
const WatchSerieSerieIdIndexLazyImport = createFileRoute(
  '/watch/serie/$serieId/',
)()
const WatchSerieSerieIdSeasonEpisodeLazyImport = createFileRoute(
  '/watch/serie/$serieId/$season/$episode',
)()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const WatchMovieMovieIdLazyRoute = WatchMovieMovieIdLazyImport.update({
  id: '/watch/movie/$movieId',
  path: '/watch/movie/$movieId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/watch/movie/$movieId.lazy').then((d) => d.Route),
)

const WatchSerieSerieIdIndexLazyRoute = WatchSerieSerieIdIndexLazyImport.update(
  {
    id: '/watch/serie/$serieId/',
    path: '/watch/serie/$serieId/',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/watch/serie/$serieId.index.lazy').then((d) => d.Route),
)

const WatchSerieSerieIdSeasonEpisodeLazyRoute =
  WatchSerieSerieIdSeasonEpisodeLazyImport.update({
    id: '/watch/serie/$serieId/$season/$episode',
    path: '/watch/serie/$serieId/$season/$episode',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/watch/serie/$serieId.$season.$episode.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/watch/movie/$movieId': {
      id: '/watch/movie/$movieId'
      path: '/watch/movie/$movieId'
      fullPath: '/watch/movie/$movieId'
      preLoaderRoute: typeof WatchMovieMovieIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/watch/serie/$serieId/': {
      id: '/watch/serie/$serieId/'
      path: '/watch/serie/$serieId'
      fullPath: '/watch/serie/$serieId'
      preLoaderRoute: typeof WatchSerieSerieIdIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/watch/serie/$serieId/$season/$episode': {
      id: '/watch/serie/$serieId/$season/$episode'
      path: '/watch/serie/$serieId/$season/$episode'
      fullPath: '/watch/serie/$serieId/$season/$episode'
      preLoaderRoute: typeof WatchSerieSerieIdSeasonEpisodeLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/watch/movie/$movieId': typeof WatchMovieMovieIdLazyRoute
  '/watch/serie/$serieId': typeof WatchSerieSerieIdIndexLazyRoute
  '/watch/serie/$serieId/$season/$episode': typeof WatchSerieSerieIdSeasonEpisodeLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/watch/movie/$movieId': typeof WatchMovieMovieIdLazyRoute
  '/watch/serie/$serieId': typeof WatchSerieSerieIdIndexLazyRoute
  '/watch/serie/$serieId/$season/$episode': typeof WatchSerieSerieIdSeasonEpisodeLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/watch/movie/$movieId': typeof WatchMovieMovieIdLazyRoute
  '/watch/serie/$serieId/': typeof WatchSerieSerieIdIndexLazyRoute
  '/watch/serie/$serieId/$season/$episode': typeof WatchSerieSerieIdSeasonEpisodeLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/watch/movie/$movieId'
    | '/watch/serie/$serieId'
    | '/watch/serie/$serieId/$season/$episode'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/watch/movie/$movieId'
    | '/watch/serie/$serieId'
    | '/watch/serie/$serieId/$season/$episode'
  id:
    | '__root__'
    | '/'
    | '/watch/movie/$movieId'
    | '/watch/serie/$serieId/'
    | '/watch/serie/$serieId/$season/$episode'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  WatchMovieMovieIdLazyRoute: typeof WatchMovieMovieIdLazyRoute
  WatchSerieSerieIdIndexLazyRoute: typeof WatchSerieSerieIdIndexLazyRoute
  WatchSerieSerieIdSeasonEpisodeLazyRoute: typeof WatchSerieSerieIdSeasonEpisodeLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  WatchMovieMovieIdLazyRoute: WatchMovieMovieIdLazyRoute,
  WatchSerieSerieIdIndexLazyRoute: WatchSerieSerieIdIndexLazyRoute,
  WatchSerieSerieIdSeasonEpisodeLazyRoute:
    WatchSerieSerieIdSeasonEpisodeLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/watch/movie/$movieId",
        "/watch/serie/$serieId/",
        "/watch/serie/$serieId/$season/$episode"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/watch/movie/$movieId": {
      "filePath": "watch/movie/$movieId.lazy.tsx"
    },
    "/watch/serie/$serieId/": {
      "filePath": "watch/serie/$serieId.index.lazy.tsx"
    },
    "/watch/serie/$serieId/$season/$episode": {
      "filePath": "watch/serie/$serieId.$season.$episode.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
